# Generated from Kontur.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,50,335,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,1,0,4,0,105,
        8,0,11,0,12,0,106,1,0,1,0,4,0,111,8,0,11,0,12,0,112,3,0,115,8,0,
        1,1,1,1,1,1,5,1,120,8,1,10,1,12,1,123,9,1,1,1,1,1,1,1,1,1,5,1,129,
        8,1,10,1,12,1,132,9,1,1,1,3,1,135,8,1,1,2,1,2,1,2,1,3,1,3,1,3,1,
        3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,
        6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,9,1,
        9,1,9,1,9,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,
        14,1,15,1,15,1,16,1,16,1,16,1,16,1,17,1,17,1,18,1,18,1,18,1,19,1,
        19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,
        24,1,24,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,
        29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,
        35,1,36,1,36,5,36,244,8,36,10,36,12,36,247,9,36,1,37,1,37,1,37,1,
        38,1,38,1,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,
        40,1,41,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,
        42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,
        44,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,1,
        46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,1,48,1,48,1,
        48,1,49,1,49,1,49,1,49,5,49,322,8,49,10,49,12,49,325,9,49,1,49,1,
        49,1,50,4,50,330,8,50,11,50,12,50,331,1,50,1,50,0,0,51,1,1,3,2,5,
        0,7,3,9,4,11,5,13,6,15,7,17,8,19,9,21,10,23,11,25,12,27,13,29,14,
        31,15,33,16,35,17,37,18,39,19,41,20,43,21,45,22,47,23,49,24,51,25,
        53,26,55,27,57,28,59,29,61,30,63,31,65,32,67,33,69,34,71,35,73,36,
        75,37,77,38,79,39,81,40,83,41,85,42,87,43,89,44,91,45,93,46,95,47,
        97,48,99,49,101,50,1,0,8,1,0,48,57,4,0,10,10,13,13,34,34,92,92,4,
        0,10,10,13,13,39,39,92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,
        110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,
        97,122,2,0,10,10,13,13,3,0,9,10,13,13,32,32,344,0,1,1,0,0,0,0,3,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,
        0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,
        0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,
        0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,
        0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,
        0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,
        0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,1,104,1,0,0,0,3,134,
        1,0,0,0,5,136,1,0,0,0,7,139,1,0,0,0,9,146,1,0,0,0,11,150,1,0,0,0,
        13,156,1,0,0,0,15,161,1,0,0,0,17,168,1,0,0,0,19,173,1,0,0,0,21,179,
        1,0,0,0,23,181,1,0,0,0,25,183,1,0,0,0,27,185,1,0,0,0,29,187,1,0,
        0,0,31,189,1,0,0,0,33,191,1,0,0,0,35,195,1,0,0,0,37,197,1,0,0,0,
        39,200,1,0,0,0,41,203,1,0,0,0,43,206,1,0,0,0,45,209,1,0,0,0,47,211,
        1,0,0,0,49,214,1,0,0,0,51,216,1,0,0,0,53,219,1,0,0,0,55,222,1,0,
        0,0,57,225,1,0,0,0,59,227,1,0,0,0,61,229,1,0,0,0,63,231,1,0,0,0,
        65,233,1,0,0,0,67,235,1,0,0,0,69,237,1,0,0,0,71,239,1,0,0,0,73,241,
        1,0,0,0,75,248,1,0,0,0,77,251,1,0,0,0,79,256,1,0,0,0,81,261,1,0,
        0,0,83,265,1,0,0,0,85,271,1,0,0,0,87,280,1,0,0,0,89,286,1,0,0,0,
        91,291,1,0,0,0,93,299,1,0,0,0,95,305,1,0,0,0,97,312,1,0,0,0,99,317,
        1,0,0,0,101,329,1,0,0,0,103,105,7,0,0,0,104,103,1,0,0,0,105,106,
        1,0,0,0,106,104,1,0,0,0,106,107,1,0,0,0,107,114,1,0,0,0,108,110,
        5,46,0,0,109,111,7,0,0,0,110,109,1,0,0,0,111,112,1,0,0,0,112,110,
        1,0,0,0,112,113,1,0,0,0,113,115,1,0,0,0,114,108,1,0,0,0,114,115,
        1,0,0,0,115,2,1,0,0,0,116,121,5,34,0,0,117,120,3,5,2,0,118,120,8,
        1,0,0,119,117,1,0,0,0,119,118,1,0,0,0,120,123,1,0,0,0,121,119,1,
        0,0,0,121,122,1,0,0,0,122,124,1,0,0,0,123,121,1,0,0,0,124,135,5,
        34,0,0,125,130,5,39,0,0,126,129,3,5,2,0,127,129,8,2,0,0,128,126,
        1,0,0,0,128,127,1,0,0,0,129,132,1,0,0,0,130,128,1,0,0,0,130,131,
        1,0,0,0,131,133,1,0,0,0,132,130,1,0,0,0,133,135,5,39,0,0,134,116,
        1,0,0,0,134,125,1,0,0,0,135,4,1,0,0,0,136,137,5,92,0,0,137,138,7,
        3,0,0,138,6,1,0,0,0,139,140,5,115,0,0,140,141,5,116,0,0,141,142,
        5,114,0,0,142,143,5,105,0,0,143,144,5,110,0,0,144,145,5,103,0,0,
        145,8,1,0,0,0,146,147,5,105,0,0,147,148,5,110,0,0,148,149,5,116,
        0,0,149,10,1,0,0,0,150,151,5,102,0,0,151,152,5,108,0,0,152,153,5,
        111,0,0,153,154,5,97,0,0,154,155,5,116,0,0,155,12,1,0,0,0,156,157,
        5,98,0,0,157,158,5,111,0,0,158,159,5,111,0,0,159,160,5,108,0,0,160,
        14,1,0,0,0,161,162,5,109,0,0,162,163,5,97,0,0,163,164,5,116,0,0,
        164,165,5,114,0,0,165,166,5,105,0,0,166,167,5,120,0,0,167,16,1,0,
        0,0,168,169,5,116,0,0,169,170,5,114,0,0,170,171,5,117,0,0,171,172,
        5,101,0,0,172,18,1,0,0,0,173,174,5,102,0,0,174,175,5,97,0,0,175,
        176,5,108,0,0,176,177,5,115,0,0,177,178,5,101,0,0,178,20,1,0,0,0,
        179,180,5,61,0,0,180,22,1,0,0,0,181,182,5,43,0,0,182,24,1,0,0,0,
        183,184,5,45,0,0,184,26,1,0,0,0,185,186,5,42,0,0,186,28,1,0,0,0,
        187,188,5,47,0,0,188,30,1,0,0,0,189,190,5,37,0,0,190,32,1,0,0,0,
        191,192,5,226,0,0,192,193,5,8364,0,0,193,194,5,65533,0,0,194,34,
        1,0,0,0,195,196,5,33,0,0,196,36,1,0,0,0,197,198,5,43,0,0,198,199,
        5,43,0,0,199,38,1,0,0,0,200,201,5,45,0,0,201,202,5,45,0,0,202,40,
        1,0,0,0,203,204,5,61,0,0,204,205,5,61,0,0,205,42,1,0,0,0,206,207,
        5,33,0,0,207,208,5,61,0,0,208,44,1,0,0,0,209,210,5,60,0,0,210,46,
        1,0,0,0,211,212,5,60,0,0,212,213,5,61,0,0,213,48,1,0,0,0,214,215,
        5,62,0,0,215,50,1,0,0,0,216,217,5,62,0,0,217,218,5,61,0,0,218,52,
        1,0,0,0,219,220,5,124,0,0,220,221,5,124,0,0,221,54,1,0,0,0,222,223,
        5,38,0,0,223,224,5,38,0,0,224,56,1,0,0,0,225,226,5,40,0,0,226,58,
        1,0,0,0,227,228,5,41,0,0,228,60,1,0,0,0,229,230,5,91,0,0,230,62,
        1,0,0,0,231,232,5,93,0,0,232,64,1,0,0,0,233,234,5,123,0,0,234,66,
        1,0,0,0,235,236,5,125,0,0,236,68,1,0,0,0,237,238,5,59,0,0,238,70,
        1,0,0,0,239,240,5,44,0,0,240,72,1,0,0,0,241,245,7,4,0,0,242,244,
        7,5,0,0,243,242,1,0,0,0,244,247,1,0,0,0,245,243,1,0,0,0,245,246,
        1,0,0,0,246,74,1,0,0,0,247,245,1,0,0,0,248,249,5,105,0,0,249,250,
        5,102,0,0,250,76,1,0,0,0,251,252,5,101,0,0,252,253,5,108,0,0,253,
        254,5,115,0,0,254,255,5,101,0,0,255,78,1,0,0,0,256,257,5,101,0,0,
        257,258,5,108,0,0,258,259,5,105,0,0,259,260,5,102,0,0,260,80,1,0,
        0,0,261,262,5,102,0,0,262,263,5,111,0,0,263,264,5,114,0,0,264,82,
        1,0,0,0,265,266,5,119,0,0,266,267,5,104,0,0,267,268,5,105,0,0,268,
        269,5,108,0,0,269,270,5,101,0,0,270,84,1,0,0,0,271,272,5,99,0,0,
        272,273,5,111,0,0,273,274,5,110,0,0,274,275,5,116,0,0,275,276,5,
        105,0,0,276,277,5,110,0,0,277,278,5,117,0,0,278,279,5,101,0,0,279,
        86,1,0,0,0,280,281,5,98,0,0,281,282,5,114,0,0,282,283,5,101,0,0,
        283,284,5,97,0,0,284,285,5,107,0,0,285,88,1,0,0,0,286,287,5,102,
        0,0,287,288,5,117,0,0,288,289,5,110,0,0,289,290,5,99,0,0,290,90,
        1,0,0,0,291,292,5,100,0,0,292,293,5,105,0,0,293,294,5,115,0,0,294,
        295,5,112,0,0,295,296,5,108,0,0,296,297,5,97,0,0,297,298,5,121,0,
        0,298,92,1,0,0,0,299,300,5,105,0,0,300,301,5,110,0,0,301,302,5,112,
        0,0,302,303,5,117,0,0,303,304,5,116,0,0,304,94,1,0,0,0,305,306,5,
        114,0,0,306,307,5,101,0,0,307,308,5,116,0,0,308,309,5,117,0,0,309,
        310,5,114,0,0,310,311,5,110,0,0,311,96,1,0,0,0,312,313,5,112,0,0,
        313,314,5,108,0,0,314,315,5,111,0,0,315,316,5,116,0,0,316,98,1,0,
        0,0,317,318,5,47,0,0,318,319,5,47,0,0,319,323,1,0,0,0,320,322,8,
        6,0,0,321,320,1,0,0,0,322,325,1,0,0,0,323,321,1,0,0,0,323,324,1,
        0,0,0,324,326,1,0,0,0,325,323,1,0,0,0,326,327,6,49,0,0,327,100,1,
        0,0,0,328,330,7,7,0,0,329,328,1,0,0,0,330,331,1,0,0,0,331,329,1,
        0,0,0,331,332,1,0,0,0,332,333,1,0,0,0,333,334,6,50,0,0,334,102,1,
        0,0,0,12,0,106,112,114,119,121,128,130,134,245,323,331,1,6,0,0
    ]

class KonturLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    NUMBER = 1
    STRING = 2
    TYPE_STRING = 3
    TYPE_INT = 4
    TYPE_FLOAT = 5
    TYPE_BOOL = 6
    TYPE_MATRIX = 7
    TRUE_VALUE = 8
    FALSE_VALUE = 9
    ASSIGN = 10
    PLUS = 11
    MINUS = 12
    MULTIPLY = 13
    DIVIDE = 14
    MODULO = 15
    TRANSPOSITION = 16
    INVERT_MATRIX = 17
    INCREMENT = 18
    DECREMENT = 19
    EQUAL = 20
    NOT_EQUAL = 21
    LESS_THAN = 22
    LESS_EQUAL = 23
    GREATER_THAN = 24
    GREATER_EQUAL = 25
    OR = 26
    AND = 27
    LEFT_PAREN = 28
    RIGHT_PAREN = 29
    LEFT_BRACKET = 30
    RIGHT_BRACKET = 31
    LEFT_BRACE = 32
    RIGHT_BRACE = 33
    SEMICOLON = 34
    COMMA = 35
    IDENTIFIER = 36
    IF_INSTR = 37
    ELSE_INSTR = 38
    ELIF_INSTR = 39
    FOR_INSTR = 40
    WHILE_INSTR = 41
    CONTINUE_INSTR = 42
    BREAK_INSTR = 43
    FUNC_INSTR = 44
    DISPLAY_INSTR = 45
    INPUT_INSTR = 46
    RETURN_INSTR = 47
    PLOT_INSTR = 48
    COMMENT = 49
    WHITE_SPACE = 50

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'string'", "'int'", "'float'", "'bool'", "'matrix'", "'true'", 
            "'false'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'\\u00E2\\u20AC\\uFFFD'", 
            "'!'", "'++'", "'--'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'||'", "'&&'", "'('", "')'", "'['", "']'", "'{'", "'}'", 
            "';'", "','", "'if'", "'else'", "'elif'", "'for'", "'while'", 
            "'continue'", "'break'", "'func'", "'display'", "'input'", "'return'", 
            "'plot'" ]

    symbolicNames = [ "<INVALID>",
            "NUMBER", "STRING", "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", 
            "TYPE_BOOL", "TYPE_MATRIX", "TRUE_VALUE", "FALSE_VALUE", "ASSIGN", 
            "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "TRANSPOSITION", 
            "INVERT_MATRIX", "INCREMENT", "DECREMENT", "EQUAL", "NOT_EQUAL", 
            "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", 
            "OR", "AND", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
            "LEFT_BRACE", "RIGHT_BRACE", "SEMICOLON", "COMMA", "IDENTIFIER", 
            "IF_INSTR", "ELSE_INSTR", "ELIF_INSTR", "FOR_INSTR", "WHILE_INSTR", 
            "CONTINUE_INSTR", "BREAK_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", 
            "INPUT_INSTR", "RETURN_INSTR", "PLOT_INSTR", "COMMENT", "WHITE_SPACE" ]

    ruleNames = [ "NUMBER", "STRING", "ESC", "TYPE_STRING", "TYPE_INT", 
                  "TYPE_FLOAT", "TYPE_BOOL", "TYPE_MATRIX", "TRUE_VALUE", 
                  "FALSE_VALUE", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", 
                  "DIVIDE", "MODULO", "TRANSPOSITION", "INVERT_MATRIX", 
                  "INCREMENT", "DECREMENT", "EQUAL", "NOT_EQUAL", "LESS_THAN", 
                  "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", "OR", "AND", 
                  "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", 
                  "LEFT_BRACE", "RIGHT_BRACE", "SEMICOLON", "COMMA", "IDENTIFIER", 
                  "IF_INSTR", "ELSE_INSTR", "ELIF_INSTR", "FOR_INSTR", "WHILE_INSTR", 
                  "CONTINUE_INSTR", "BREAK_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", 
                  "INPUT_INSTR", "RETURN_INSTR", "PLOT_INSTR", "COMMENT", 
                  "WHITE_SPACE" ]

    grammarFileName = "Kontur.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


