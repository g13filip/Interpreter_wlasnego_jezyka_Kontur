# Generated from Kontur.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,51,337,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,1,
        0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,
        2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,15,1,16,1,16,
        1,16,1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,24,1,25,1,25,1,26,
        1,26,1,27,1,27,1,28,1,28,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,35,1,36,1,36,1,36,
        1,36,1,36,1,37,1,37,1,37,1,37,1,38,1,38,1,38,1,38,1,38,1,38,1,39,
        1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,
        1,40,1,41,1,41,1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,42,1,42,1,42,
        1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,1,44,1,44,
        1,44,1,45,1,45,1,45,1,45,1,45,1,46,1,46,1,46,1,46,5,46,281,8,46,
        10,46,12,46,284,9,46,1,46,1,46,1,47,4,47,289,8,47,11,47,12,47,290,
        1,47,1,47,1,48,4,48,296,8,48,11,48,12,48,297,1,48,1,48,4,48,302,
        8,48,11,48,12,48,303,3,48,306,8,48,1,49,1,49,1,49,5,49,311,8,49,
        10,49,12,49,314,9,49,1,49,1,49,1,49,1,49,5,49,320,8,49,10,49,12,
        49,323,9,49,1,49,3,49,326,8,49,1,50,1,50,1,50,1,51,1,51,5,51,333,
        8,51,10,51,12,51,336,9,51,0,0,52,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,
        8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,
        19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,
        30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,
        41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,97,49,99,50,101,0,103,
        51,1,0,8,2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,48,57,4,0,10,10,
        13,13,34,34,92,92,4,0,10,10,13,13,39,39,92,92,8,0,34,34,47,47,92,
        92,98,98,102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,
        4,0,48,57,65,90,95,95,97,122,346,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,
        0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,
        0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,
        0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,
        0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,
        0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,
        0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,
        0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,
        0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,
        0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,
        0,0,97,1,0,0,0,0,99,1,0,0,0,0,103,1,0,0,0,1,105,1,0,0,0,3,112,1,
        0,0,0,5,116,1,0,0,0,7,122,1,0,0,0,9,127,1,0,0,0,11,134,1,0,0,0,13,
        139,1,0,0,0,15,145,1,0,0,0,17,147,1,0,0,0,19,149,1,0,0,0,21,151,
        1,0,0,0,23,153,1,0,0,0,25,155,1,0,0,0,27,157,1,0,0,0,29,159,1,0,
        0,0,31,161,1,0,0,0,33,164,1,0,0,0,35,167,1,0,0,0,37,170,1,0,0,0,
        39,173,1,0,0,0,41,175,1,0,0,0,43,178,1,0,0,0,45,180,1,0,0,0,47,183,
        1,0,0,0,49,186,1,0,0,0,51,189,1,0,0,0,53,191,1,0,0,0,55,193,1,0,
        0,0,57,195,1,0,0,0,59,197,1,0,0,0,61,199,1,0,0,0,63,201,1,0,0,0,
        65,203,1,0,0,0,67,205,1,0,0,0,69,207,1,0,0,0,71,210,1,0,0,0,73,215,
        1,0,0,0,75,220,1,0,0,0,77,224,1,0,0,0,79,230,1,0,0,0,81,239,1,0,
        0,0,83,245,1,0,0,0,85,250,1,0,0,0,87,258,1,0,0,0,89,264,1,0,0,0,
        91,271,1,0,0,0,93,276,1,0,0,0,95,288,1,0,0,0,97,295,1,0,0,0,99,325,
        1,0,0,0,101,327,1,0,0,0,103,330,1,0,0,0,105,106,5,115,0,0,106,107,
        5,116,0,0,107,108,5,114,0,0,108,109,5,105,0,0,109,110,5,110,0,0,
        110,111,5,103,0,0,111,2,1,0,0,0,112,113,5,105,0,0,113,114,5,110,
        0,0,114,115,5,116,0,0,115,4,1,0,0,0,116,117,5,102,0,0,117,118,5,
        108,0,0,118,119,5,111,0,0,119,120,5,97,0,0,120,121,5,116,0,0,121,
        6,1,0,0,0,122,123,5,98,0,0,123,124,5,111,0,0,124,125,5,111,0,0,125,
        126,5,108,0,0,126,8,1,0,0,0,127,128,5,109,0,0,128,129,5,97,0,0,129,
        130,5,116,0,0,130,131,5,114,0,0,131,132,5,105,0,0,132,133,5,120,
        0,0,133,10,1,0,0,0,134,135,5,116,0,0,135,136,5,114,0,0,136,137,5,
        117,0,0,137,138,5,101,0,0,138,12,1,0,0,0,139,140,5,102,0,0,140,141,
        5,97,0,0,141,142,5,108,0,0,142,143,5,115,0,0,143,144,5,101,0,0,144,
        14,1,0,0,0,145,146,5,61,0,0,146,16,1,0,0,0,147,148,5,43,0,0,148,
        18,1,0,0,0,149,150,5,45,0,0,150,20,1,0,0,0,151,152,5,42,0,0,152,
        22,1,0,0,0,153,154,5,47,0,0,154,24,1,0,0,0,155,156,5,37,0,0,156,
        26,1,0,0,0,157,158,5,39,0,0,158,28,1,0,0,0,159,160,5,126,0,0,160,
        30,1,0,0,0,161,162,5,43,0,0,162,163,5,43,0,0,163,32,1,0,0,0,164,
        165,5,45,0,0,165,166,5,45,0,0,166,34,1,0,0,0,167,168,5,61,0,0,168,
        169,5,61,0,0,169,36,1,0,0,0,170,171,5,33,0,0,171,172,5,61,0,0,172,
        38,1,0,0,0,173,174,5,60,0,0,174,40,1,0,0,0,175,176,5,60,0,0,176,
        177,5,61,0,0,177,42,1,0,0,0,178,179,5,62,0,0,179,44,1,0,0,0,180,
        181,5,62,0,0,181,182,5,61,0,0,182,46,1,0,0,0,183,184,5,124,0,0,184,
        185,5,124,0,0,185,48,1,0,0,0,186,187,5,38,0,0,187,188,5,38,0,0,188,
        50,1,0,0,0,189,190,5,33,0,0,190,52,1,0,0,0,191,192,5,40,0,0,192,
        54,1,0,0,0,193,194,5,41,0,0,194,56,1,0,0,0,195,196,5,91,0,0,196,
        58,1,0,0,0,197,198,5,93,0,0,198,60,1,0,0,0,199,200,5,123,0,0,200,
        62,1,0,0,0,201,202,5,125,0,0,202,64,1,0,0,0,203,204,5,59,0,0,204,
        66,1,0,0,0,205,206,5,44,0,0,206,68,1,0,0,0,207,208,5,105,0,0,208,
        209,5,102,0,0,209,70,1,0,0,0,210,211,5,101,0,0,211,212,5,108,0,0,
        212,213,5,115,0,0,213,214,5,101,0,0,214,72,1,0,0,0,215,216,5,101,
        0,0,216,217,5,108,0,0,217,218,5,105,0,0,218,219,5,102,0,0,219,74,
        1,0,0,0,220,221,5,102,0,0,221,222,5,111,0,0,222,223,5,114,0,0,223,
        76,1,0,0,0,224,225,5,119,0,0,225,226,5,104,0,0,226,227,5,105,0,0,
        227,228,5,108,0,0,228,229,5,101,0,0,229,78,1,0,0,0,230,231,5,99,
        0,0,231,232,5,111,0,0,232,233,5,110,0,0,233,234,5,116,0,0,234,235,
        5,105,0,0,235,236,5,110,0,0,236,237,5,117,0,0,237,238,5,101,0,0,
        238,80,1,0,0,0,239,240,5,98,0,0,240,241,5,114,0,0,241,242,5,101,
        0,0,242,243,5,97,0,0,243,244,5,107,0,0,244,82,1,0,0,0,245,246,5,
        102,0,0,246,247,5,117,0,0,247,248,5,110,0,0,248,249,5,99,0,0,249,
        84,1,0,0,0,250,251,5,100,0,0,251,252,5,105,0,0,252,253,5,115,0,0,
        253,254,5,112,0,0,254,255,5,108,0,0,255,256,5,97,0,0,256,257,5,121,
        0,0,257,86,1,0,0,0,258,259,5,105,0,0,259,260,5,110,0,0,260,261,5,
        112,0,0,261,262,5,117,0,0,262,263,5,116,0,0,263,88,1,0,0,0,264,265,
        5,114,0,0,265,266,5,101,0,0,266,267,5,116,0,0,267,268,5,117,0,0,
        268,269,5,114,0,0,269,270,5,110,0,0,270,90,1,0,0,0,271,272,5,112,
        0,0,272,273,5,108,0,0,273,274,5,111,0,0,274,275,5,116,0,0,275,92,
        1,0,0,0,276,277,5,47,0,0,277,278,5,47,0,0,278,282,1,0,0,0,279,281,
        8,0,0,0,280,279,1,0,0,0,281,284,1,0,0,0,282,280,1,0,0,0,282,283,
        1,0,0,0,283,285,1,0,0,0,284,282,1,0,0,0,285,286,6,46,0,0,286,94,
        1,0,0,0,287,289,7,1,0,0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,
        1,0,0,0,290,291,1,0,0,0,291,292,1,0,0,0,292,293,6,47,0,0,293,96,
        1,0,0,0,294,296,7,2,0,0,295,294,1,0,0,0,296,297,1,0,0,0,297,295,
        1,0,0,0,297,298,1,0,0,0,298,305,1,0,0,0,299,301,5,46,0,0,300,302,
        7,2,0,0,301,300,1,0,0,0,302,303,1,0,0,0,303,301,1,0,0,0,303,304,
        1,0,0,0,304,306,1,0,0,0,305,299,1,0,0,0,305,306,1,0,0,0,306,98,1,
        0,0,0,307,312,5,34,0,0,308,311,3,101,50,0,309,311,8,3,0,0,310,308,
        1,0,0,0,310,309,1,0,0,0,311,314,1,0,0,0,312,310,1,0,0,0,312,313,
        1,0,0,0,313,315,1,0,0,0,314,312,1,0,0,0,315,326,5,34,0,0,316,321,
        5,39,0,0,317,320,3,101,50,0,318,320,8,4,0,0,319,317,1,0,0,0,319,
        318,1,0,0,0,320,323,1,0,0,0,321,319,1,0,0,0,321,322,1,0,0,0,322,
        324,1,0,0,0,323,321,1,0,0,0,324,326,5,39,0,0,325,307,1,0,0,0,325,
        316,1,0,0,0,326,100,1,0,0,0,327,328,5,92,0,0,328,329,7,5,0,0,329,
        102,1,0,0,0,330,334,7,6,0,0,331,333,7,7,0,0,332,331,1,0,0,0,333,
        336,1,0,0,0,334,332,1,0,0,0,334,335,1,0,0,0,335,104,1,0,0,0,336,
        334,1,0,0,0,12,0,282,290,297,303,305,310,312,319,321,325,334,1,6,
        0,0
    ]

class KonturLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE_STRING = 1
    TYPE_INT = 2
    TYPE_FLOAT = 3
    TYPE_BOOL = 4
    TYPE_MATRIX = 5
    TRUE_VALUE = 6
    FALSE_VALUE = 7
    ASSIGN = 8
    PLUS = 9
    MINUS = 10
    MULTIPLY = 11
    DIVIDE = 12
    MODULO = 13
    TRANSPOSITION = 14
    INVERT_MATRIX = 15
    INCREMENT = 16
    DECREMENT = 17
    EQUAL = 18
    NOT_EQUAL = 19
    LESS_THAN = 20
    LESS_EQUAL = 21
    GREATER_THAN = 22
    GREATER_EQUAL = 23
    OR = 24
    AND = 25
    NOT = 26
    LEFT_PAREN = 27
    RIGHT_PAREN = 28
    LEFT_BRACKET = 29
    RIGHT_BRACKET = 30
    LEFT_BRACE = 31
    RIGHT_BRACE = 32
    SEMICOLON = 33
    COMMA = 34
    IF_INSTR = 35
    ELSE_INSTR = 36
    ELIF_INSTR = 37
    FOR_INSTR = 38
    WHILE_INSTR = 39
    CONTINUE_INSTR = 40
    BREAK_INSTR = 41
    FUNC_INSTR = 42
    DISPLAY_INSTR = 43
    INPUT_INSTR = 44
    RETURN_INSTR = 45
    PLOT_INSTR = 46
    COMMENT = 47
    WHITE_SPACE = 48
    NUMBER = 49
    STRING = 50
    IDENTIFIER = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'string'", "'int'", "'float'", "'bool'", "'matrix'", "'true'", 
            "'false'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", "'''", 
            "'~'", "'++'", "'--'", "'=='", "'!='", "'<'", "'<='", "'>'", 
            "'>='", "'||'", "'&&'", "'!'", "'('", "')'", "'['", "']'", "'{'", 
            "'}'", "';'", "','", "'if'", "'else'", "'elif'", "'for'", "'while'", 
            "'continue'", "'break'", "'func'", "'display'", "'input'", "'return'", 
            "'plot'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", "TYPE_MATRIX", 
            "TRUE_VALUE", "FALSE_VALUE", "ASSIGN", "PLUS", "MINUS", "MULTIPLY", 
            "DIVIDE", "MODULO", "TRANSPOSITION", "INVERT_MATRIX", "INCREMENT", 
            "DECREMENT", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", 
            "GREATER_THAN", "GREATER_EQUAL", "OR", "AND", "NOT", "LEFT_PAREN", 
            "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", 
            "RIGHT_BRACE", "SEMICOLON", "COMMA", "IF_INSTR", "ELSE_INSTR", 
            "ELIF_INSTR", "FOR_INSTR", "WHILE_INSTR", "CONTINUE_INSTR", 
            "BREAK_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", "INPUT_INSTR", 
            "RETURN_INSTR", "PLOT_INSTR", "COMMENT", "WHITE_SPACE", "NUMBER", 
            "STRING", "IDENTIFIER" ]

    ruleNames = [ "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
                  "TYPE_MATRIX", "TRUE_VALUE", "FALSE_VALUE", "ASSIGN", 
                  "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "TRANSPOSITION", 
                  "INVERT_MATRIX", "INCREMENT", "DECREMENT", "EQUAL", "NOT_EQUAL", 
                  "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", "GREATER_EQUAL", 
                  "OR", "AND", "NOT", "LEFT_PAREN", "RIGHT_PAREN", "LEFT_BRACKET", 
                  "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", "SEMICOLON", 
                  "COMMA", "IF_INSTR", "ELSE_INSTR", "ELIF_INSTR", "FOR_INSTR", 
                  "WHILE_INSTR", "CONTINUE_INSTR", "BREAK_INSTR", "FUNC_INSTR", 
                  "DISPLAY_INSTR", "INPUT_INSTR", "RETURN_INSTR", "PLOT_INSTR", 
                  "COMMENT", "WHITE_SPACE", "NUMBER", "STRING", "ESC", "IDENTIFIER" ]

    grammarFileName = "Kontur.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


