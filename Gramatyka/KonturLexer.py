# Generated from Kontur.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,61,395,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,1,0,1,0,1,0,1,0,1,0,1,0,1,0,1,1,
        1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,7,
        1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,
        1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,1,17,1,17,1,17,1,18,
        1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,1,21,1,21,1,22,1,22,
        1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,1,26,1,26,1,27,1,27,
        1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,32,1,32,
        1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,1,39,
        1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,41,1,41,1,42,
        1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,1,44,1,44,1,44,1,44,
        1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,1,45,1,45,1,46,1,46,
        1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,47,1,48,1,48,
        1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,50,1,50,
        1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,
        1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,1,55,1,55,1,56,1,56,
        1,56,1,56,5,56,339,8,56,10,56,12,56,342,9,56,1,56,1,56,1,57,4,57,
        347,8,57,11,57,12,57,348,1,57,1,57,1,58,4,58,354,8,58,11,58,12,58,
        355,1,58,1,58,4,58,360,8,58,11,58,12,58,361,3,58,364,8,58,1,59,1,
        59,1,59,5,59,369,8,59,10,59,12,59,372,9,59,1,59,1,59,1,59,1,59,5,
        59,378,8,59,10,59,12,59,381,9,59,1,59,3,59,384,8,59,1,60,1,60,1,
        60,1,61,1,61,5,61,391,8,61,10,61,12,61,394,9,61,0,0,62,1,1,3,2,5,
        3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,
        31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,51,26,
        53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,73,37,
        75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,46,93,47,95,48,
        97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,56,113,57,115,
        58,117,59,119,60,121,0,123,61,1,0,8,2,0,10,10,13,13,3,0,9,10,13,
        13,32,32,1,0,48,57,4,0,10,10,13,13,34,34,92,92,4,0,10,10,13,13,39,
        39,92,92,8,0,34,34,47,47,92,92,98,98,102,102,110,110,114,114,116,
        116,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,404,0,1,
        1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,
        0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,
        0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,
        0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,
        0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,
        0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,
        0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,
        0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,
        0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,0,0,0,0,89,1,0,0,0,0,91,1,0,
        0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,0,101,1,
        0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,
        111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,0,117,1,0,0,0,0,119,1,0,
        0,0,0,123,1,0,0,0,1,125,1,0,0,0,3,132,1,0,0,0,5,136,1,0,0,0,7,142,
        1,0,0,0,9,147,1,0,0,0,11,154,1,0,0,0,13,159,1,0,0,0,15,164,1,0,0,
        0,17,170,1,0,0,0,19,172,1,0,0,0,21,174,1,0,0,0,23,176,1,0,0,0,25,
        178,1,0,0,0,27,180,1,0,0,0,29,182,1,0,0,0,31,184,1,0,0,0,33,186,
        1,0,0,0,35,189,1,0,0,0,37,192,1,0,0,0,39,195,1,0,0,0,41,198,1,0,
        0,0,43,201,1,0,0,0,45,204,1,0,0,0,47,207,1,0,0,0,49,210,1,0,0,0,
        51,212,1,0,0,0,53,215,1,0,0,0,55,217,1,0,0,0,57,220,1,0,0,0,59,223,
        1,0,0,0,61,226,1,0,0,0,63,228,1,0,0,0,65,230,1,0,0,0,67,232,1,0,
        0,0,69,234,1,0,0,0,71,236,1,0,0,0,73,238,1,0,0,0,75,240,1,0,0,0,
        77,242,1,0,0,0,79,244,1,0,0,0,81,247,1,0,0,0,83,252,1,0,0,0,85,257,
        1,0,0,0,87,261,1,0,0,0,89,267,1,0,0,0,91,276,1,0,0,0,93,282,1,0,
        0,0,95,287,1,0,0,0,97,295,1,0,0,0,99,301,1,0,0,0,101,308,1,0,0,0,
        103,313,1,0,0,0,105,317,1,0,0,0,107,321,1,0,0,0,109,325,1,0,0,0,
        111,329,1,0,0,0,113,334,1,0,0,0,115,346,1,0,0,0,117,353,1,0,0,0,
        119,383,1,0,0,0,121,385,1,0,0,0,123,388,1,0,0,0,125,126,5,115,0,
        0,126,127,5,116,0,0,127,128,5,114,0,0,128,129,5,105,0,0,129,130,
        5,110,0,0,130,131,5,103,0,0,131,2,1,0,0,0,132,133,5,105,0,0,133,
        134,5,110,0,0,134,135,5,116,0,0,135,4,1,0,0,0,136,137,5,102,0,0,
        137,138,5,108,0,0,138,139,5,111,0,0,139,140,5,97,0,0,140,141,5,116,
        0,0,141,6,1,0,0,0,142,143,5,98,0,0,143,144,5,111,0,0,144,145,5,111,
        0,0,145,146,5,108,0,0,146,8,1,0,0,0,147,148,5,109,0,0,148,149,5,
        97,0,0,149,150,5,116,0,0,150,151,5,114,0,0,151,152,5,105,0,0,152,
        153,5,120,0,0,153,10,1,0,0,0,154,155,5,118,0,0,155,156,5,111,0,0,
        156,157,5,105,0,0,157,158,5,100,0,0,158,12,1,0,0,0,159,160,5,116,
        0,0,160,161,5,114,0,0,161,162,5,117,0,0,162,163,5,101,0,0,163,14,
        1,0,0,0,164,165,5,102,0,0,165,166,5,97,0,0,166,167,5,108,0,0,167,
        168,5,115,0,0,168,169,5,101,0,0,169,16,1,0,0,0,170,171,5,61,0,0,
        171,18,1,0,0,0,172,173,5,43,0,0,173,20,1,0,0,0,174,175,5,45,0,0,
        175,22,1,0,0,0,176,177,5,42,0,0,177,24,1,0,0,0,178,179,5,47,0,0,
        179,26,1,0,0,0,180,181,5,37,0,0,181,28,1,0,0,0,182,183,5,39,0,0,
        183,30,1,0,0,0,184,185,5,126,0,0,185,32,1,0,0,0,186,187,5,43,0,0,
        187,188,5,43,0,0,188,34,1,0,0,0,189,190,5,45,0,0,190,191,5,45,0,
        0,191,36,1,0,0,0,192,193,5,43,0,0,193,194,5,61,0,0,194,38,1,0,0,
        0,195,196,5,45,0,0,196,197,5,61,0,0,197,40,1,0,0,0,198,199,5,42,
        0,0,199,200,5,61,0,0,200,42,1,0,0,0,201,202,5,47,0,0,202,203,5,61,
        0,0,203,44,1,0,0,0,204,205,5,61,0,0,205,206,5,61,0,0,206,46,1,0,
        0,0,207,208,5,33,0,0,208,209,5,61,0,0,209,48,1,0,0,0,210,211,5,60,
        0,0,211,50,1,0,0,0,212,213,5,60,0,0,213,214,5,61,0,0,214,52,1,0,
        0,0,215,216,5,62,0,0,216,54,1,0,0,0,217,218,5,62,0,0,218,219,5,61,
        0,0,219,56,1,0,0,0,220,221,5,124,0,0,221,222,5,124,0,0,222,58,1,
        0,0,0,223,224,5,38,0,0,224,225,5,38,0,0,225,60,1,0,0,0,226,227,5,
        33,0,0,227,62,1,0,0,0,228,229,5,40,0,0,229,64,1,0,0,0,230,231,5,
        41,0,0,231,66,1,0,0,0,232,233,5,91,0,0,233,68,1,0,0,0,234,235,5,
        93,0,0,235,70,1,0,0,0,236,237,5,123,0,0,237,72,1,0,0,0,238,239,5,
        125,0,0,239,74,1,0,0,0,240,241,5,59,0,0,241,76,1,0,0,0,242,243,5,
        44,0,0,243,78,1,0,0,0,244,245,5,105,0,0,245,246,5,102,0,0,246,80,
        1,0,0,0,247,248,5,101,0,0,248,249,5,108,0,0,249,250,5,115,0,0,250,
        251,5,101,0,0,251,82,1,0,0,0,252,253,5,101,0,0,253,254,5,108,0,0,
        254,255,5,105,0,0,255,256,5,102,0,0,256,84,1,0,0,0,257,258,5,102,
        0,0,258,259,5,111,0,0,259,260,5,114,0,0,260,86,1,0,0,0,261,262,5,
        119,0,0,262,263,5,104,0,0,263,264,5,105,0,0,264,265,5,108,0,0,265,
        266,5,101,0,0,266,88,1,0,0,0,267,268,5,99,0,0,268,269,5,111,0,0,
        269,270,5,110,0,0,270,271,5,116,0,0,271,272,5,105,0,0,272,273,5,
        110,0,0,273,274,5,117,0,0,274,275,5,101,0,0,275,90,1,0,0,0,276,277,
        5,98,0,0,277,278,5,114,0,0,278,279,5,101,0,0,279,280,5,97,0,0,280,
        281,5,107,0,0,281,92,1,0,0,0,282,283,5,102,0,0,283,284,5,117,0,0,
        284,285,5,110,0,0,285,286,5,99,0,0,286,94,1,0,0,0,287,288,5,100,
        0,0,288,289,5,105,0,0,289,290,5,115,0,0,290,291,5,112,0,0,291,292,
        5,108,0,0,292,293,5,97,0,0,293,294,5,121,0,0,294,96,1,0,0,0,295,
        296,5,105,0,0,296,297,5,110,0,0,297,298,5,112,0,0,298,299,5,117,
        0,0,299,300,5,116,0,0,300,98,1,0,0,0,301,302,5,114,0,0,302,303,5,
        101,0,0,303,304,5,116,0,0,304,305,5,117,0,0,305,306,5,114,0,0,306,
        307,5,110,0,0,307,100,1,0,0,0,308,309,5,112,0,0,309,310,5,108,0,
        0,310,311,5,111,0,0,311,312,5,116,0,0,312,102,1,0,0,0,313,314,5,
        112,0,0,314,315,5,111,0,0,315,316,5,119,0,0,316,104,1,0,0,0,317,
        318,5,115,0,0,318,319,5,105,0,0,319,320,5,110,0,0,320,106,1,0,0,
        0,321,322,5,99,0,0,322,323,5,111,0,0,323,324,5,115,0,0,324,108,1,
        0,0,0,325,326,5,116,0,0,326,327,5,97,0,0,327,328,5,110,0,0,328,110,
        1,0,0,0,329,330,5,99,0,0,330,331,5,116,0,0,331,332,5,97,0,0,332,
        333,5,110,0,0,333,112,1,0,0,0,334,335,5,47,0,0,335,336,5,47,0,0,
        336,340,1,0,0,0,337,339,8,0,0,0,338,337,1,0,0,0,339,342,1,0,0,0,
        340,338,1,0,0,0,340,341,1,0,0,0,341,343,1,0,0,0,342,340,1,0,0,0,
        343,344,6,56,0,0,344,114,1,0,0,0,345,347,7,1,0,0,346,345,1,0,0,0,
        347,348,1,0,0,0,348,346,1,0,0,0,348,349,1,0,0,0,349,350,1,0,0,0,
        350,351,6,57,0,0,351,116,1,0,0,0,352,354,7,2,0,0,353,352,1,0,0,0,
        354,355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,363,1,0,0,0,
        357,359,5,46,0,0,358,360,7,2,0,0,359,358,1,0,0,0,360,361,1,0,0,0,
        361,359,1,0,0,0,361,362,1,0,0,0,362,364,1,0,0,0,363,357,1,0,0,0,
        363,364,1,0,0,0,364,118,1,0,0,0,365,370,5,34,0,0,366,369,3,121,60,
        0,367,369,8,3,0,0,368,366,1,0,0,0,368,367,1,0,0,0,369,372,1,0,0,
        0,370,368,1,0,0,0,370,371,1,0,0,0,371,373,1,0,0,0,372,370,1,0,0,
        0,373,384,5,34,0,0,374,379,5,39,0,0,375,378,3,121,60,0,376,378,8,
        4,0,0,377,375,1,0,0,0,377,376,1,0,0,0,378,381,1,0,0,0,379,377,1,
        0,0,0,379,380,1,0,0,0,380,382,1,0,0,0,381,379,1,0,0,0,382,384,5,
        39,0,0,383,365,1,0,0,0,383,374,1,0,0,0,384,120,1,0,0,0,385,386,5,
        92,0,0,386,387,7,5,0,0,387,122,1,0,0,0,388,392,7,6,0,0,389,391,7,
        7,0,0,390,389,1,0,0,0,391,394,1,0,0,0,392,390,1,0,0,0,392,393,1,
        0,0,0,393,124,1,0,0,0,394,392,1,0,0,0,12,0,340,348,355,361,363,368,
        370,377,379,383,392,1,6,0,0
    ]

class KonturLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE_STRING = 1
    TYPE_INT = 2
    TYPE_FLOAT = 3
    TYPE_BOOL = 4
    TYPE_MATRIX = 5
    TYPE_VOID = 6
    TRUE_VALUE = 7
    FALSE_VALUE = 8
    ASSIGN = 9
    PLUS = 10
    MINUS = 11
    MULTIPLY = 12
    DIVIDE = 13
    MODULO = 14
    TRANSPOSITION = 15
    INVERT_MATRIX = 16
    INCREMENT = 17
    DECREMENT = 18
    ADD_TO = 19
    SUBTRACT_FROM = 20
    TIMES = 21
    DIVIDE_FROM = 22
    EQUAL = 23
    NOT_EQUAL = 24
    LESS_THAN = 25
    LESS_EQUAL = 26
    GREATER_THAN = 27
    GREATER_EQUAL = 28
    OR = 29
    AND = 30
    NOT = 31
    LEFT_PAREN = 32
    RIGHT_PAREN = 33
    LEFT_BRACKET = 34
    RIGHT_BRACKET = 35
    LEFT_BRACE = 36
    RIGHT_BRACE = 37
    SEMICOLON = 38
    COMMA = 39
    IF_INSTR = 40
    ELSE_INSTR = 41
    ELIF_INSTR = 42
    FOR_INSTR = 43
    WHILE_INSTR = 44
    CONTINUE_INSTR = 45
    BREAK_INSTR = 46
    FUNC_INSTR = 47
    DISPLAY_INSTR = 48
    INPUT_INSTR = 49
    RETURN_INSTR = 50
    PLOT_INSTR = 51
    POWER_FUNC = 52
    SIN_FUNC = 53
    COS_FUNC = 54
    TAN_FUNC = 55
    CTAN_FUNC = 56
    COMMENT = 57
    WHITE_SPACE = 58
    NUMBER = 59
    STRING = 60
    IDENTIFIER = 61

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'string'", "'int'", "'float'", "'bool'", "'matrix'", "'void'", 
            "'true'", "'false'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'''", "'~'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", 
            "'!'", "'('", "')'", "'['", "']'", "'{'", "'}'", "';'", "','", 
            "'if'", "'else'", "'elif'", "'for'", "'while'", "'continue'", 
            "'break'", "'func'", "'display'", "'input'", "'return'", "'plot'", 
            "'pow'", "'sin'", "'cos'", "'tan'", "'ctan'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", "TYPE_MATRIX", 
            "TYPE_VOID", "TRUE_VALUE", "FALSE_VALUE", "ASSIGN", "PLUS", 
            "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "TRANSPOSITION", "INVERT_MATRIX", 
            "INCREMENT", "DECREMENT", "ADD_TO", "SUBTRACT_FROM", "TIMES", 
            "DIVIDE_FROM", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", 
            "GREATER_THAN", "GREATER_EQUAL", "OR", "AND", "NOT", "LEFT_PAREN", 
            "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", 
            "RIGHT_BRACE", "SEMICOLON", "COMMA", "IF_INSTR", "ELSE_INSTR", 
            "ELIF_INSTR", "FOR_INSTR", "WHILE_INSTR", "CONTINUE_INSTR", 
            "BREAK_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", "INPUT_INSTR", 
            "RETURN_INSTR", "PLOT_INSTR", "POWER_FUNC", "SIN_FUNC", "COS_FUNC", 
            "TAN_FUNC", "CTAN_FUNC", "COMMENT", "WHITE_SPACE", "NUMBER", 
            "STRING", "IDENTIFIER" ]

    ruleNames = [ "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
                  "TYPE_MATRIX", "TYPE_VOID", "TRUE_VALUE", "FALSE_VALUE", 
                  "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
                  "TRANSPOSITION", "INVERT_MATRIX", "INCREMENT", "DECREMENT", 
                  "ADD_TO", "SUBTRACT_FROM", "TIMES", "DIVIDE_FROM", "EQUAL", 
                  "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", 
                  "GREATER_EQUAL", "OR", "AND", "NOT", "LEFT_PAREN", "RIGHT_PAREN", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
                  "SEMICOLON", "COMMA", "IF_INSTR", "ELSE_INSTR", "ELIF_INSTR", 
                  "FOR_INSTR", "WHILE_INSTR", "CONTINUE_INSTR", "BREAK_INSTR", 
                  "FUNC_INSTR", "DISPLAY_INSTR", "INPUT_INSTR", "RETURN_INSTR", 
                  "PLOT_INSTR", "POWER_FUNC", "SIN_FUNC", "COS_FUNC", "TAN_FUNC", 
                  "CTAN_FUNC", "COMMENT", "WHITE_SPACE", "NUMBER", "STRING", 
                  "ESC", "IDENTIFIER" ]

    grammarFileName = "Kontur.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


