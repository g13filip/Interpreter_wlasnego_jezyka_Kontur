# Generated from Kontur.g4 by ANTLR 4.13.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,63,423,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,2,58,7,
        58,2,59,7,59,2,60,7,60,2,61,7,61,2,62,7,62,2,63,7,63,1,0,1,0,1,0,
        1,0,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,6,
        1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,1,14,1,15,1,15,1,16,1,16,1,16,
        1,17,1,17,1,17,1,18,1,18,1,18,1,19,1,19,1,19,1,20,1,20,1,20,1,21,
        1,21,1,21,1,22,1,22,1,22,1,23,1,23,1,23,1,24,1,24,1,25,1,25,1,25,
        1,26,1,26,1,27,1,27,1,27,1,28,1,28,1,28,1,29,1,29,1,29,1,30,1,30,
        1,31,1,31,1,32,1,32,1,33,1,33,1,34,1,34,1,35,1,35,1,36,1,36,1,37,
        1,37,1,38,1,38,1,39,1,39,1,39,1,40,1,40,1,40,1,40,1,40,1,41,1,41,
        1,41,1,41,1,41,1,42,1,42,1,42,1,42,1,43,1,43,1,43,1,43,1,43,1,43,
        1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,44,1,45,1,45,1,45,1,45,
        1,45,1,45,1,46,1,46,1,46,1,46,1,46,1,47,1,47,1,47,1,47,1,47,1,47,
        1,47,1,47,1,48,1,48,1,48,1,48,1,48,1,48,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,50,1,50,1,50,1,50,1,50,1,51,1,51,1,51,1,51,1,52,1,52,
        1,52,1,52,1,53,1,53,1,53,1,53,1,54,1,54,1,54,1,54,1,55,1,55,1,55,
        1,55,1,55,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,1,56,
        1,56,1,56,1,56,1,56,1,56,1,56,1,57,1,57,1,57,1,57,1,57,1,57,1,57,
        1,58,1,58,1,58,1,58,5,58,367,8,58,10,58,12,58,370,9,58,1,58,1,58,
        1,59,4,59,375,8,59,11,59,12,59,376,1,59,1,59,1,60,4,60,382,8,60,
        11,60,12,60,383,1,60,1,60,4,60,388,8,60,11,60,12,60,389,3,60,392,
        8,60,1,61,1,61,1,61,5,61,397,8,61,10,61,12,61,400,9,61,1,61,1,61,
        1,61,1,61,5,61,406,8,61,10,61,12,61,409,9,61,1,61,3,61,412,8,61,
        1,62,1,62,1,62,1,63,1,63,5,63,419,8,63,10,63,12,63,422,9,63,0,0,
        64,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,
        13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,
        24,49,25,51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,
        35,71,36,73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,44,89,45,91,
        46,93,47,95,48,97,49,99,50,101,51,103,52,105,53,107,54,109,55,111,
        56,113,57,115,58,117,59,119,60,121,61,123,62,125,0,127,63,1,0,8,
        2,0,10,10,13,13,3,0,9,10,13,13,32,32,1,0,48,57,4,0,10,10,13,13,34,
        34,92,92,4,0,10,10,13,13,39,39,92,92,8,0,34,34,47,47,92,92,98,98,
        102,102,110,110,114,114,116,116,3,0,65,90,95,95,97,122,4,0,48,57,
        65,90,95,95,97,122,432,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,
        0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,
        0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,
        0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,
        0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,
        0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,
        0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,
        0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,
        0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,0,0,0,85,1,0,0,0,0,87,1,
        0,0,0,0,89,1,0,0,0,0,91,1,0,0,0,0,93,1,0,0,0,0,95,1,0,0,0,0,97,1,
        0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,
        1,0,0,0,0,109,1,0,0,0,0,111,1,0,0,0,0,113,1,0,0,0,0,115,1,0,0,0,
        0,117,1,0,0,0,0,119,1,0,0,0,0,121,1,0,0,0,0,123,1,0,0,0,0,127,1,
        0,0,0,1,129,1,0,0,0,3,136,1,0,0,0,5,140,1,0,0,0,7,146,1,0,0,0,9,
        151,1,0,0,0,11,158,1,0,0,0,13,163,1,0,0,0,15,168,1,0,0,0,17,174,
        1,0,0,0,19,176,1,0,0,0,21,178,1,0,0,0,23,180,1,0,0,0,25,182,1,0,
        0,0,27,184,1,0,0,0,29,186,1,0,0,0,31,188,1,0,0,0,33,190,1,0,0,0,
        35,193,1,0,0,0,37,196,1,0,0,0,39,199,1,0,0,0,41,202,1,0,0,0,43,205,
        1,0,0,0,45,208,1,0,0,0,47,211,1,0,0,0,49,214,1,0,0,0,51,216,1,0,
        0,0,53,219,1,0,0,0,55,221,1,0,0,0,57,224,1,0,0,0,59,227,1,0,0,0,
        61,230,1,0,0,0,63,232,1,0,0,0,65,234,1,0,0,0,67,236,1,0,0,0,69,238,
        1,0,0,0,71,240,1,0,0,0,73,242,1,0,0,0,75,244,1,0,0,0,77,246,1,0,
        0,0,79,248,1,0,0,0,81,251,1,0,0,0,83,256,1,0,0,0,85,261,1,0,0,0,
        87,265,1,0,0,0,89,271,1,0,0,0,91,280,1,0,0,0,93,286,1,0,0,0,95,291,
        1,0,0,0,97,299,1,0,0,0,99,305,1,0,0,0,101,312,1,0,0,0,103,317,1,
        0,0,0,105,321,1,0,0,0,107,325,1,0,0,0,109,329,1,0,0,0,111,333,1,
        0,0,0,113,338,1,0,0,0,115,355,1,0,0,0,117,362,1,0,0,0,119,374,1,
        0,0,0,121,381,1,0,0,0,123,411,1,0,0,0,125,413,1,0,0,0,127,416,1,
        0,0,0,129,130,5,115,0,0,130,131,5,116,0,0,131,132,5,114,0,0,132,
        133,5,105,0,0,133,134,5,110,0,0,134,135,5,103,0,0,135,2,1,0,0,0,
        136,137,5,105,0,0,137,138,5,110,0,0,138,139,5,116,0,0,139,4,1,0,
        0,0,140,141,5,102,0,0,141,142,5,108,0,0,142,143,5,111,0,0,143,144,
        5,97,0,0,144,145,5,116,0,0,145,6,1,0,0,0,146,147,5,98,0,0,147,148,
        5,111,0,0,148,149,5,111,0,0,149,150,5,108,0,0,150,8,1,0,0,0,151,
        152,5,109,0,0,152,153,5,97,0,0,153,154,5,116,0,0,154,155,5,114,0,
        0,155,156,5,105,0,0,156,157,5,120,0,0,157,10,1,0,0,0,158,159,5,118,
        0,0,159,160,5,111,0,0,160,161,5,105,0,0,161,162,5,100,0,0,162,12,
        1,0,0,0,163,164,5,116,0,0,164,165,5,114,0,0,165,166,5,117,0,0,166,
        167,5,101,0,0,167,14,1,0,0,0,168,169,5,102,0,0,169,170,5,97,0,0,
        170,171,5,108,0,0,171,172,5,115,0,0,172,173,5,101,0,0,173,16,1,0,
        0,0,174,175,5,61,0,0,175,18,1,0,0,0,176,177,5,43,0,0,177,20,1,0,
        0,0,178,179,5,45,0,0,179,22,1,0,0,0,180,181,5,42,0,0,181,24,1,0,
        0,0,182,183,5,47,0,0,183,26,1,0,0,0,184,185,5,37,0,0,185,28,1,0,
        0,0,186,187,5,39,0,0,187,30,1,0,0,0,188,189,5,126,0,0,189,32,1,0,
        0,0,190,191,5,43,0,0,191,192,5,43,0,0,192,34,1,0,0,0,193,194,5,45,
        0,0,194,195,5,45,0,0,195,36,1,0,0,0,196,197,5,43,0,0,197,198,5,61,
        0,0,198,38,1,0,0,0,199,200,5,45,0,0,200,201,5,61,0,0,201,40,1,0,
        0,0,202,203,5,42,0,0,203,204,5,61,0,0,204,42,1,0,0,0,205,206,5,47,
        0,0,206,207,5,61,0,0,207,44,1,0,0,0,208,209,5,61,0,0,209,210,5,61,
        0,0,210,46,1,0,0,0,211,212,5,33,0,0,212,213,5,61,0,0,213,48,1,0,
        0,0,214,215,5,60,0,0,215,50,1,0,0,0,216,217,5,60,0,0,217,218,5,61,
        0,0,218,52,1,0,0,0,219,220,5,62,0,0,220,54,1,0,0,0,221,222,5,62,
        0,0,222,223,5,61,0,0,223,56,1,0,0,0,224,225,5,124,0,0,225,226,5,
        124,0,0,226,58,1,0,0,0,227,228,5,38,0,0,228,229,5,38,0,0,229,60,
        1,0,0,0,230,231,5,33,0,0,231,62,1,0,0,0,232,233,5,40,0,0,233,64,
        1,0,0,0,234,235,5,41,0,0,235,66,1,0,0,0,236,237,5,91,0,0,237,68,
        1,0,0,0,238,239,5,93,0,0,239,70,1,0,0,0,240,241,5,123,0,0,241,72,
        1,0,0,0,242,243,5,125,0,0,243,74,1,0,0,0,244,245,5,59,0,0,245,76,
        1,0,0,0,246,247,5,44,0,0,247,78,1,0,0,0,248,249,5,105,0,0,249,250,
        5,102,0,0,250,80,1,0,0,0,251,252,5,101,0,0,252,253,5,108,0,0,253,
        254,5,115,0,0,254,255,5,101,0,0,255,82,1,0,0,0,256,257,5,101,0,0,
        257,258,5,108,0,0,258,259,5,105,0,0,259,260,5,102,0,0,260,84,1,0,
        0,0,261,262,5,102,0,0,262,263,5,111,0,0,263,264,5,114,0,0,264,86,
        1,0,0,0,265,266,5,119,0,0,266,267,5,104,0,0,267,268,5,105,0,0,268,
        269,5,108,0,0,269,270,5,101,0,0,270,88,1,0,0,0,271,272,5,99,0,0,
        272,273,5,111,0,0,273,274,5,110,0,0,274,275,5,116,0,0,275,276,5,
        105,0,0,276,277,5,110,0,0,277,278,5,117,0,0,278,279,5,101,0,0,279,
        90,1,0,0,0,280,281,5,98,0,0,281,282,5,114,0,0,282,283,5,101,0,0,
        283,284,5,97,0,0,284,285,5,107,0,0,285,92,1,0,0,0,286,287,5,102,
        0,0,287,288,5,117,0,0,288,289,5,110,0,0,289,290,5,99,0,0,290,94,
        1,0,0,0,291,292,5,100,0,0,292,293,5,105,0,0,293,294,5,115,0,0,294,
        295,5,112,0,0,295,296,5,108,0,0,296,297,5,97,0,0,297,298,5,121,0,
        0,298,96,1,0,0,0,299,300,5,105,0,0,300,301,5,110,0,0,301,302,5,112,
        0,0,302,303,5,117,0,0,303,304,5,116,0,0,304,98,1,0,0,0,305,306,5,
        114,0,0,306,307,5,101,0,0,307,308,5,116,0,0,308,309,5,117,0,0,309,
        310,5,114,0,0,310,311,5,110,0,0,311,100,1,0,0,0,312,313,5,112,0,
        0,313,314,5,108,0,0,314,315,5,111,0,0,315,316,5,116,0,0,316,102,
        1,0,0,0,317,318,5,112,0,0,318,319,5,111,0,0,319,320,5,119,0,0,320,
        104,1,0,0,0,321,322,5,115,0,0,322,323,5,105,0,0,323,324,5,110,0,
        0,324,106,1,0,0,0,325,326,5,99,0,0,326,327,5,111,0,0,327,328,5,115,
        0,0,328,108,1,0,0,0,329,330,5,116,0,0,330,331,5,97,0,0,331,332,5,
        110,0,0,332,110,1,0,0,0,333,334,5,99,0,0,334,335,5,116,0,0,335,336,
        5,97,0,0,336,337,5,110,0,0,337,112,1,0,0,0,338,339,5,109,0,0,339,
        340,5,97,0,0,340,341,5,116,0,0,341,342,5,114,0,0,342,343,5,105,0,
        0,343,344,5,120,0,0,344,345,5,95,0,0,345,346,5,102,0,0,346,347,5,
        114,0,0,347,348,5,111,0,0,348,349,5,109,0,0,349,350,5,95,0,0,350,
        351,5,108,0,0,351,352,5,111,0,0,352,353,5,111,0,0,353,354,5,112,
        0,0,354,114,1,0,0,0,355,356,5,118,0,0,356,357,5,115,0,0,357,358,
        5,116,0,0,358,359,5,97,0,0,359,360,5,99,0,0,360,361,5,107,0,0,361,
        116,1,0,0,0,362,363,5,47,0,0,363,364,5,47,0,0,364,368,1,0,0,0,365,
        367,8,0,0,0,366,365,1,0,0,0,367,370,1,0,0,0,368,366,1,0,0,0,368,
        369,1,0,0,0,369,371,1,0,0,0,370,368,1,0,0,0,371,372,6,58,0,0,372,
        118,1,0,0,0,373,375,7,1,0,0,374,373,1,0,0,0,375,376,1,0,0,0,376,
        374,1,0,0,0,376,377,1,0,0,0,377,378,1,0,0,0,378,379,6,59,0,0,379,
        120,1,0,0,0,380,382,7,2,0,0,381,380,1,0,0,0,382,383,1,0,0,0,383,
        381,1,0,0,0,383,384,1,0,0,0,384,391,1,0,0,0,385,387,5,46,0,0,386,
        388,7,2,0,0,387,386,1,0,0,0,388,389,1,0,0,0,389,387,1,0,0,0,389,
        390,1,0,0,0,390,392,1,0,0,0,391,385,1,0,0,0,391,392,1,0,0,0,392,
        122,1,0,0,0,393,398,5,34,0,0,394,397,3,125,62,0,395,397,8,3,0,0,
        396,394,1,0,0,0,396,395,1,0,0,0,397,400,1,0,0,0,398,396,1,0,0,0,
        398,399,1,0,0,0,399,401,1,0,0,0,400,398,1,0,0,0,401,412,5,34,0,0,
        402,407,5,39,0,0,403,406,3,125,62,0,404,406,8,4,0,0,405,403,1,0,
        0,0,405,404,1,0,0,0,406,409,1,0,0,0,407,405,1,0,0,0,407,408,1,0,
        0,0,408,410,1,0,0,0,409,407,1,0,0,0,410,412,5,39,0,0,411,393,1,0,
        0,0,411,402,1,0,0,0,412,124,1,0,0,0,413,414,5,92,0,0,414,415,7,5,
        0,0,415,126,1,0,0,0,416,420,7,6,0,0,417,419,7,7,0,0,418,417,1,0,
        0,0,419,422,1,0,0,0,420,418,1,0,0,0,420,421,1,0,0,0,421,128,1,0,
        0,0,422,420,1,0,0,0,12,0,368,376,383,389,391,396,398,405,407,411,
        420,1,6,0,0
    ]

class KonturLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TYPE_STRING = 1
    TYPE_INT = 2
    TYPE_FLOAT = 3
    TYPE_BOOL = 4
    TYPE_MATRIX = 5
    TYPE_VOID = 6
    TRUE_VALUE = 7
    FALSE_VALUE = 8
    ASSIGN = 9
    PLUS = 10
    MINUS = 11
    MULTIPLY = 12
    DIVIDE = 13
    MODULO = 14
    TRANSPOSITION = 15
    INVERT_MATRIX = 16
    INCREMENT = 17
    DECREMENT = 18
    ADD_TO = 19
    SUBTRACT_FROM = 20
    TIMES = 21
    DIVIDE_FROM = 22
    EQUAL = 23
    NOT_EQUAL = 24
    LESS_THAN = 25
    LESS_EQUAL = 26
    GREATER_THAN = 27
    GREATER_EQUAL = 28
    OR = 29
    AND = 30
    NOT = 31
    LEFT_PAREN = 32
    RIGHT_PAREN = 33
    LEFT_BRACKET = 34
    RIGHT_BRACKET = 35
    LEFT_BRACE = 36
    RIGHT_BRACE = 37
    SEMICOLON = 38
    COMMA = 39
    IF_INSTR = 40
    ELSE_INSTR = 41
    ELIF_INSTR = 42
    FOR_INSTR = 43
    WHILE_INSTR = 44
    CONTINUE_INSTR = 45
    BREAK_INSTR = 46
    FUNC_INSTR = 47
    DISPLAY_INSTR = 48
    INPUT_INSTR = 49
    RETURN_INSTR = 50
    PLOT_INSTR = 51
    POWER_FUNC = 52
    SIN_FUNC = 53
    COS_FUNC = 54
    TAN_FUNC = 55
    CTAN_FUNC = 56
    MATRIX_FROM_LOOP_FUNC = 57
    VSTACK_FUNC = 58
    COMMENT = 59
    WHITE_SPACE = 60
    NUMBER = 61
    STRING = 62
    IDENTIFIER = 63

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'string'", "'int'", "'float'", "'bool'", "'matrix'", "'void'", 
            "'true'", "'false'", "'='", "'+'", "'-'", "'*'", "'/'", "'%'", 
            "'''", "'~'", "'++'", "'--'", "'+='", "'-='", "'*='", "'/='", 
            "'=='", "'!='", "'<'", "'<='", "'>'", "'>='", "'||'", "'&&'", 
            "'!'", "'('", "')'", "'['", "']'", "'{'", "'}'", "';'", "','", 
            "'if'", "'else'", "'elif'", "'for'", "'while'", "'continue'", 
            "'break'", "'func'", "'display'", "'input'", "'return'", "'plot'", 
            "'pow'", "'sin'", "'cos'", "'tan'", "'ctan'", "'matrix_from_loop'", 
            "'vstack'" ]

    symbolicNames = [ "<INVALID>",
            "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", "TYPE_MATRIX", 
            "TYPE_VOID", "TRUE_VALUE", "FALSE_VALUE", "ASSIGN", "PLUS", 
            "MINUS", "MULTIPLY", "DIVIDE", "MODULO", "TRANSPOSITION", "INVERT_MATRIX", 
            "INCREMENT", "DECREMENT", "ADD_TO", "SUBTRACT_FROM", "TIMES", 
            "DIVIDE_FROM", "EQUAL", "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", 
            "GREATER_THAN", "GREATER_EQUAL", "OR", "AND", "NOT", "LEFT_PAREN", 
            "RIGHT_PAREN", "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", 
            "RIGHT_BRACE", "SEMICOLON", "COMMA", "IF_INSTR", "ELSE_INSTR", 
            "ELIF_INSTR", "FOR_INSTR", "WHILE_INSTR", "CONTINUE_INSTR", 
            "BREAK_INSTR", "FUNC_INSTR", "DISPLAY_INSTR", "INPUT_INSTR", 
            "RETURN_INSTR", "PLOT_INSTR", "POWER_FUNC", "SIN_FUNC", "COS_FUNC", 
            "TAN_FUNC", "CTAN_FUNC", "MATRIX_FROM_LOOP_FUNC", "VSTACK_FUNC", 
            "COMMENT", "WHITE_SPACE", "NUMBER", "STRING", "IDENTIFIER" ]

    ruleNames = [ "TYPE_STRING", "TYPE_INT", "TYPE_FLOAT", "TYPE_BOOL", 
                  "TYPE_MATRIX", "TYPE_VOID", "TRUE_VALUE", "FALSE_VALUE", 
                  "ASSIGN", "PLUS", "MINUS", "MULTIPLY", "DIVIDE", "MODULO", 
                  "TRANSPOSITION", "INVERT_MATRIX", "INCREMENT", "DECREMENT", 
                  "ADD_TO", "SUBTRACT_FROM", "TIMES", "DIVIDE_FROM", "EQUAL", 
                  "NOT_EQUAL", "LESS_THAN", "LESS_EQUAL", "GREATER_THAN", 
                  "GREATER_EQUAL", "OR", "AND", "NOT", "LEFT_PAREN", "RIGHT_PAREN", 
                  "LEFT_BRACKET", "RIGHT_BRACKET", "LEFT_BRACE", "RIGHT_BRACE", 
                  "SEMICOLON", "COMMA", "IF_INSTR", "ELSE_INSTR", "ELIF_INSTR", 
                  "FOR_INSTR", "WHILE_INSTR", "CONTINUE_INSTR", "BREAK_INSTR", 
                  "FUNC_INSTR", "DISPLAY_INSTR", "INPUT_INSTR", "RETURN_INSTR", 
                  "PLOT_INSTR", "POWER_FUNC", "SIN_FUNC", "COS_FUNC", "TAN_FUNC", 
                  "CTAN_FUNC", "MATRIX_FROM_LOOP_FUNC", "VSTACK_FUNC", "COMMENT", 
                  "WHITE_SPACE", "NUMBER", "STRING", "ESC", "IDENTIFIER" ]

    grammarFileName = "Kontur.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


