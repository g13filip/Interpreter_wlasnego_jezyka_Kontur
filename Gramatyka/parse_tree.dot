digraph ParseTree {
  node0 [label="program\nmatrixB=A';matrixC=A*B;if(C[1,1]>10){display(\"Wynik wiekszy niz 10\");}else{display(\"Wynik mniejszy lub rowny 10\");}<EOF>"];
  node1 [label="statement\nmatrixB=A';"];
  node0 -> node1;
  node2 [label="assignment\nmatrixB=A';"];
  node1 -> node2;
  node3 [label="typeName\nmatrix"];
  node2 -> node3;
  node4 [label="matrix\nmatrix"];
  node3 -> node4;
  node5 [label="B\nB"];
  node2 -> node5;
  node6 [label="=\n="];
  node2 -> node6;
  node7 [label="expression\nA'"];
  node2 -> node7;
  node8 [label="matrixExpression\nA'"];
  node7 -> node8;
  node9 [label="matrixAtom\nA"];
  node8 -> node9;
  node10 [label="A\nA"];
  node9 -> node10;
  node11 [label="'\n'"];
  node8 -> node11;
  node12 [label=";\n;"];
  node2 -> node12;
  node13 [label="statement\nmatrixC=A*B;"];
  node0 -> node13;
  node14 [label="assignment\nmatrixC=A*B;"];
  node13 -> node14;
  node15 [label="typeName\nmatrix"];
  node14 -> node15;
  node16 [label="matrix\nmatrix"];
  node15 -> node16;
  node17 [label="C\nC"];
  node14 -> node17;
  node18 [label="=\n="];
  node14 -> node18;
  node19 [label="expression\nA*B"];
  node14 -> node19;
  node20 [label="numExpression\nA*B"];
  node19 -> node20;
  node21 [label="term\nA*B"];
  node20 -> node21;
  node22 [label="term\nA"];
  node21 -> node22;
  node23 [label="factor\nA"];
  node22 -> node23;
  node24 [label="A\nA"];
  node23 -> node24;
  node25 [label="*\n*"];
  node21 -> node25;
  node26 [label="factor\nB"];
  node21 -> node26;
  node27 [label="B\nB"];
  node26 -> node27;
  node28 [label=";\n;"];
  node14 -> node28;
  node29 [label="statement\nif(C[1,1]>10){display(\"Wynik wiekszy niz 10\");}else{display(\"Wynik mniejszy lub rowny 10\");}"];
  node0 -> node29;
  node30 [label="ifStatement\nif(C[1,1]>10){display(\"Wynik wiekszy niz 10\");}else{display(\"Wynik mniejszy lub rowny 10\");}"];
  node29 -> node30;
  node31 [label="if\nif"];
  node30 -> node31;
  node32 [label="(\n("];
  node30 -> node32;
  node33 [label="boolExpression\nC[1,1]>10"];
  node30 -> node33;
  node34 [label="numExpression\nC[1,1]"];
  node33 -> node34;
  node35 [label="term\nC[1,1]"];
  node34 -> node35;
  node36 [label="factor\nC[1,1]"];
  node35 -> node36;
  node37 [label="indexedVar\nC[1,1]"];
  node36 -> node37;
  node38 [label="C\nC"];
  node37 -> node38;
  node39 [label="[\n["];
  node37 -> node39;
  node40 [label="indexList\n1,1"];
  node37 -> node40;
  node41 [label="expression\n1"];
  node40 -> node41;
  node42 [label="numExpression\n1"];
  node41 -> node42;
  node43 [label="term\n1"];
  node42 -> node43;
  node44 [label="factor\n1"];
  node43 -> node44;
  node45 [label="1\n1"];
  node44 -> node45;
  node46 [label=",\n,"];
  node40 -> node46;
  node47 [label="expression\n1"];
  node40 -> node47;
  node48 [label="numExpression\n1"];
  node47 -> node48;
  node49 [label="term\n1"];
  node48 -> node49;
  node50 [label="factor\n1"];
  node49 -> node50;
  node51 [label="1\n1"];
  node50 -> node51;
  node52 [label="]\n]"];
  node37 -> node52;
  node53 [label="comparisonOperator\n>"];
  node33 -> node53;
  node54 [label=">\n>"];
  node53 -> node54;
  node55 [label="numExpression\n10"];
  node33 -> node55;
  node56 [label="term\n10"];
  node55 -> node56;
  node57 [label="factor\n10"];
  node56 -> node57;
  node58 [label="10\n10"];
  node57 -> node58;
  node59 [label=")\n)"];
  node30 -> node59;
  node60 [label="statement\n{display(\"Wynik wiekszy niz 10\");}"];
  node30 -> node60;
  node61 [label="block\n{display(\"Wynik wiekszy niz 10\");}"];
  node60 -> node61;
  node62 [label="{\n{"];
  node61 -> node62;
  node63 [label="statement\ndisplay(\"Wynik wiekszy niz 10\");"];
  node61 -> node63;
  node64 [label="displayDecl\ndisplay(\"Wynik wiekszy niz 10\");"];
  node63 -> node64;
  node65 [label="display\ndisplay"];
  node64 -> node65;
  node66 [label="(\n("];
  node64 -> node66;
  node67 [label="statement\n\"Wynik wiekszy niz 10\""];
  node64 -> node67;
  node68 [label="expression\n\"Wynik wiekszy niz 10\""];
  node67 -> node68;
  node69 [label="stringExpression\n\"Wynik wiekszy niz 10\""];
  node68 -> node69;
  node70 [label=""Wynik wiekszy niz 10"\n\"Wynik wiekszy niz 10\""];
  node69 -> node70;
  node71 [label=")\n)"];
  node64 -> node71;
  node72 [label=";\n;"];
  node64 -> node72;
  node73 [label="}\n}"];
  node61 -> node73;
  node74 [label="else\nelse"];
  node30 -> node74;
  node75 [label="statement\n{display(\"Wynik mniejszy lub rowny 10\");}"];
  node30 -> node75;
  node76 [label="block\n{display(\"Wynik mniejszy lub rowny 10\");}"];
  node75 -> node76;
  node77 [label="{\n{"];
  node76 -> node77;
  node78 [label="statement\ndisplay(\"Wynik mniejszy lub rowny 10\");"];
  node76 -> node78;
  node79 [label="displayDecl\ndisplay(\"Wynik mniejszy lub rowny 10\");"];
  node78 -> node79;
  node80 [label="display\ndisplay"];
  node79 -> node80;
  node81 [label="(\n("];
  node79 -> node81;
  node82 [label="statement\n\"Wynik mniejszy lub rowny 10\""];
  node79 -> node82;
  node83 [label="expression\n\"Wynik mniejszy lub rowny 10\""];
  node82 -> node83;
  node84 [label="stringExpression\n\"Wynik mniejszy lub rowny 10\""];
  node83 -> node84;
  node85 [label=""Wynik mniejszy lub rowny 10"\n\"Wynik mniejszy lub rowny 10\""];
  node84 -> node85;
  node86 [label=")\n)"];
  node79 -> node86;
  node87 [label=";\n;"];
  node79 -> node87;
  node88 [label="}\n}"];
  node76 -> node88;
  node89 [label="<EOF>\n<EOF>"];
  node0 -> node89;
}
